\subsection{Old stuff, trying to make it more formal}

Specifically, let the \textit{externally visible} parts of an abstract predicate $\hat P$ be the subsets given by two projections, $\In(\cdot)$ and $\Out(\cdot)$, identifying the subsets of $\hat P$ that contain its ``inputs'' and ``outputs'', respectively. Further, let $\Out \in \hat P \rightarrow \OutProj{\hat P}$ and $\In \in \hat P \rightarrow \InProj{\hat P}$ be the projections viewed as idempotent mappings, ... We extend $\out{\cdot}$ to sequences component-wise, ...

A \textit{driver} of $\hat M$ and $\hat N$ is a nonempty sequence of inputs, $\delta \in \hat I^{+}$, and induces a trajectory $\tau$ in $\hat M$ (resp. $\hat N$) where $\tau[0] = \top$ and $\forall i \in \mathbb{N} : i < | \delta | \implies \tau[i+1] = \hat M(\delta[i] \sqcap \tau[i])$; the trajectory induced by a driver $\delta$ in $\hat M$ is denoted by $\Driv{\hat M}{\delta}$.

Intuitively, if $\hat M$ produces the same, or at least more specified, outputs than $\hat N$ for all possible drivers, then every visible behaviour of $\hat M$ is covered by $\hat N$. We thus say that $\hat M$ refines $\hat N$, denoted by $\hat M \leq \hat N$, iff:

% \todo{Footnote that ``Traj'' comes from trajectories in prev. papers?}

% \todo{We have to use $=$ for our trajectories since $\sqsubseteq$ allows one to pick bad states for unconstrained wires.}

\begin{equation*}
\forall \delta \in \hat I^{+} : \out{\Driv{\hat M}{\delta}} \sqsubseteq \out{\Driv{\hat N}{\delta}}
\end{equation*}

\todo{Example!}

\subsubsection{Simulation} Let $\enc \in \hat P \times \hat Q$ be a simulation relation such that $\hat p \enc \hat q$ implies (1) $\out{\hat p} \sqsubseteq \out{\hat q}$ and (2) $\hat M(\hat \iota \sqcap \hat p) \enc \hat N(\hat \iota \sqcap \hat q)$ for all inputs $\hat \iota \in \hat I$. We extend this relation to $\hat M$ and $\hat N$ such that $\hat M \enc \hat N$ iff their top elements are related, $(\top \in \hat P) \enc \, (\top \in \hat Q)$.

\todo{This relation is equivalent to the earlier notion of refinement: $\hat M \leq \hat N \iff \hat M \enc \hat N$.}

\todo{We can have trajectories defined by the simulation relation as well.}

% (read as $\hat p$ ``encodes'' $\hat q$)

\todo{Reference proof in appendix.}

\todo{Explain difference with Bryant's version?}

Let $G \in S \rightarrow (\hat Q \rightarrow \hat Q)$ and $\mathcal{G} \in (S \rightarrow \hat Q) \rightarrow (S \rightarrow \hat Q)$ be the duals of $F$ and $\mathcal{F}$ in $\hat N$, respectively. Further, let $\Psi_{*}$ be the least fix point of $\Psi = \mathcal{G}(\Psi)$ and the dual of $\Phi_{*}$ in $\hat N$.

\begin{lemma}
$\forall s \in S : \Psi_{*}(s) \enc \Phi_{*}(s)$
\end{lemma}

\subsubsection{Trajectory} A trajectory assertion $\hat A = (S,s_{0},R,\pi_{a},\pi_{c})$ for $\hat N$ where antecedents only mention inputs, $\pi_{a} \in S \rightarrow \hat I$, and consequents only mention outputs, $\pi_{c} \in S \rightarrow \hat O$, is referred to as an \textit{external trajectory assertion}. Intuitively, a satisfied external trajectory assertion is property of $N$ that must hold regardless of its internal state.

Given that $\Phi_{*}(s) \enc \Psi_{*}(s)$, and thus $\out{\Phi_{*}(s)} \sqsubseteq \out{\Psi_{*}(s)}$, for all $s \in S$, it follows that $\Phi_{*}(s) \sqcap \pi_{a}(s) \sqsubseteq \pi_{c}(s) \implies \Psi_{*}(s) \sqcap \pi_{a}(s) \sqsubseteq \pi_{c}(s)$.

\begin{theorem}
Given two abstract predicate transformers, $\hat M$ and $\hat N$, and an external trajectory assertion $\hat A$ for $\hat N$. If $\hat M \preceq \hat N$, then $\hat N \models \hat A$ implies that $\hat M \models \hat A$.
\end{theorem}

\begin{corollary}
Given two abstract predicate transformer, $\hat M$ and $\hat N = \prod \hat n_{i}$, and a trajectory assertion $\hat A$ for $\hat N$. Let $\hat N[\hat n_{i} = \hat M]$ be $\hat N$ where $\hat n_{i}$ is replaced with $\hat M$. If $\hat M \enc \hat n_{i}$ for some index $i$, then $\hat N \models \hat A$ implies that $\hat N[\hat n_{i} = \hat M] \models \hat A$.
\end{corollary}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Intuitively, if $\hat M$ refines $\hat N$, then a circuit can safely substitute occurrences of $N$ with $M$ and still satisfy the same assertions as before.

%% Let the \textit{externally visible} parts of an abstract predicate $\hat P$ be the subsets given by two projection mappings, $\I$ and $\O$, identifying the ``inputs'' and ``outputs'' of $\hat P$, respectively. With a slight abuse of notation, we overload both mappings and say that $\hat P$ is \textit{comparable} to some $\hat Q$ iff $\I(\hat P) = \I(\hat Q)$ and $\O(\hat P) = \O(\hat Q)$.

%% Define a \textit{trajectory} $\tau \in \hat P^{+}$ of an abstract predicate transformer $\hat M \in \hat P \rightarrow \hat P$ such that $\forall i \in \mathbb{N} : 0 < i < | \tau | \Rightarrow \tau[i] \sqsubseteq \hat M ( \tau[i-1])$; $\Traj(\hat M)$ is the set of all possible trajectories in $\hat M$ and is prefix-closed. The ordering $\sqsubseteq$ on $\hat P$ is extended to trajectories point-wise $\tau \sqsubseteq \gamma \iff \forall i \in \mathbb{N} : 0 < i < | \tau | = | \gamma | \Rightarrow \tau[i] \sqsubseteq \gamma[i]$.

%% Intuitively, an abstract predicate transformers $\hat M$ is \textit{behaviourally similar} to another $\hat N$, written $\hat M \preceq \hat N$, if their predicate types are comparable and every sequence of inputs produces the same outputs, or in other words:

%% \begin{equation} \label{eq:traj}
%% \forall \tau \in \Traj(\hat M) : \forall \gamma \in \Traj(\hat N) : | \tau | = | \gamma | \Rightarrow (\I(\tau) \sqsubseteq \I(\gamma) \Rightarrow \O(\tau) \sqsubseteq \O(\gamma))
%% \end{equation}

%% Let the mapping $\V$ be the product of $\I$ and $\O$ such that $\V(\hat P) = (\I(\hat P),\O(\hat P))$ and ordered as $\V(\tau) \sqsubseteq \V(\gamma)$ iff $\I(\tau) \sqsubset \I(\gamma)$ and $\O(\tau) \sqsubseteq \O(\gamma)$. We can then restate our earlier intuition for $\hat M \preceq \hat N$ as a simulation relation:

%% \begin{equation} \label{eq:sim}
%% \forall \hat p \in \hat P : \forall \hat q \in \hat Q : \V(\hat p) \sqsubseteq \V(\hat q) \Rightarrow \V(\hat M (\hat p)) \sqsubseteq \V(\hat N (\hat q))
%% \end{equation}

%% A trajectory assertion $\hat A = (S,s_{0},R,\pi_{a},\pi_{c})$ over some abstract predicate transformer $\hat M \in \hat P \rightarrow \hat P$ is an \textit{external} assertion if neither $\pi_{a}$ nor $\pi_{c}$ mentions internal signals, that is, $\pi_{a}(s) \cap \V(\hat P) = \emptyset$ and $\pi_{c}(s) \cap \V(\hat P) = \emptyset$ for all $s \in S$. 

\subsubsection{Satisfaction} Given a $\hat A = (S,s_{0},R,\pi_{a},\pi_{c})$, if $\hat N \models \hat A$ then $\forall s \in S : \Phi_{*}(s) \sqcap \pi_{\alpha}(s) \sqsubseteq \pi_{c}(s)$ where $\Phi_{*}$ is the least fixpoint of $\Phi = \mathcal{F}(\Phi)$. Recall that $F (s) (\hat p) = \hat N (\pi_{a} (s) \sqcap \hat p)$, $\mathcal{F} (\Phi) (s_{0}) = \top$ and $\mathcal{F} (\Phi) (s) = \sqcup \{ F (s') (\Phi(s')) \, | \, (s',s) \in R \}$ otherwise.

\subsubsection{Refinement} Given two abstract predicate transformers $\hat M$ and $\hat N$ such that $\hat M \preceq \hat N$, and an assertion $\hat A$ such that $\hat N \models \hat A$, then $\hat M \models \hat A$ as well.

\subsection{WIP}
 
The visible part of a predicate are the subsets given by two projections, $\InProj$ and $\OutProj$, identifying the ``inputs'' and ``outputs'', respectively. Further, we know $\hat I = \hat P_{/\InProj} = \hat Q_{/\InProj}$ and $\hat O = \hat P_{/\OutProj} = \hat Q_{/\OutProj}$ since $M$ and $N$ share visible components. With a slight abuse of notation, we define an overloaded projection mapping $\pi_{o}$ that identifies the outputs $\hat O$ of both $\hat P$ and $\hat Q$. Further, let $\pi_{i}^{-1}$ lift inputs into predicates $\hat P$ or $\hat Q$ such that $\pi_{i}^{-1}(\hat I) \setminus \hat I = \hat \top \setminus \hat I$, where $\hat \top$ represents the supernum in either $\hat P$ or $\hat Q$.

Define a \textit{trajectory} $\tau \in \hat P^{+}$ of $\hat M$ such that $\forall i \in \mathbb{N} : 0 < i < | \tau | \Rightarrow \tau[i] \sqsubseteq \hat M ( \tau[i-1])$; $\Traj(\hat M)$ is the set of all possible trajectories in $\hat M$. Trajectories in $\hat N$ are defined similarily for $\hat Q^{+}$.

Let a \textit{driver} $\delta \in \hat I^{+}$ be a sequence of inputs; the set of all possible drivers $D$ are the same in both $\hat M$ and $\hat N$. Every driver $\delta$ in $\hat M$ induces a trajectory $\tau^{\delta} \in \hat P^{+}$, denoted by $\Traj(\hat M)(\delta)$, where $\tau^{\delta}[0] = \pi_{i}^{-1}(\delta[0])$ and $\forall i \in \mathbb{N} : 0 < i < | \delta | \Rightarrow \tau^{\delta}[i] = \pi_{i}^{-1}(\delta[i]) \sqcap \hat M(\tau^{\delta}[i-1])$. Trajectories induced by drivers in $\hat N$ are defined similarily.

$\hat M$ is \textit{behaviourally similar} to $\hat N$, written $\hat M \preceq \hat N$, iff:

\begin{equation}
\forall \delta \in D : \pi_{o}(\Traj(\hat M)(\delta)) \sqsubseteq \pi_{o}(\Traj(\hat N)(\delta))
\end{equation}

\noindent In other words, $\hat M$ is similar to $\hat N$ if, for every possible input sequence, the output of $\hat N$ is matched by $\hat M$, regardless of what either transformers initial state.

A trajectory assertion $\hat A = (S,s_{0},R,\pi_{a},\pi_{c})$ for $\hat N$ whose antecedents and consequents only constrain elements of $\hat I$ or $\hat O$ are referred to as \textit{external assertions}, that is, $\forall s \in S : \pi_{a}(s) \setminus \hat V = \pi_{c}(s) \setminus \hat V = \emptyset$ where $\hat V = \hat I \cup \hat O$.

%% \ref{eq:traj} $\iff$ \ref{eq:sim}:

%% \ref{eq:traj} $\Rightarrow$ \ref{eq:sim}: Suppose that this is not true, then there exists some $\hat p \in \hat P$ and $\hat q \in \hat Q$ such that $\V(\hat p) \sqsubseteq \V(\hat q)$ but $\V(\hat M(\hat p)) \nsqsubseteq \V(\hat N(\hat q))$. $\V(\hat p) \sqsubseteq \V(\hat q)$ implies that $\I(\hat p) \sqsubseteq \I(\hat q)$ and $\O(\hat p) \sqsubseteq \O(\hat q)$, and $\V(\hat M(\hat p)) \nsqsubseteq \V(\hat N(\hat q))$ implies that either $\I(\hat M(\hat p)) \nsqsubseteq \I(\hat N(\hat q))$ or $\O(\hat M(\hat p)) \nsqsubseteq \O(\hat N(\hat q))$. If $\I(\hat M(\hat p)) \nsqsubseteq \I(\hat N(\hat q))$ then our statement is trivially true, so the interesting case is when $\I(\hat M(\hat p)) \sqsubseteq \I(\hat N(\hat q))$ but $\O(\hat M(\hat p)) \nsqsubseteq \O(\hat N(\hat q))$. However, both $\langle \sqsubseteq \hat p, \sqsubseteq \hat M(\hat p) \rangle \in \hat P^{+}$ and $\langle \sqsubseteq \hat p, \sqsubseteq \hat M(\hat q) \rangle \in \hat Q^{+}$ describe valid trajectory prefixes. Together with $\V(\hat p) \sqsubseteq \V(\hat q)$, this means that $\O(\sqsubseteq \hat M(\hat p)) \sqsubseteq \O(\sqsubseteq \hat M(\hat q))$. But $\hat M$ and $\hat N$ are monotonic, so this contradicts $\O(\hat M(\hat p)) \nsqsubseteq \O(\hat N(\hat q))$.

%% \ref{eq:traj} $\Leftarrow$ \ref{eq:sim}: Trajectories are always at least as specified as what its transformer allows and \ref{eq:sim} states that any step allowed by $\hat M$ can be matched by $\hat N$. Together with the monotonicity of $\hat M$ and $\hat N$, this ensures that every pair of trajectories will match. The statement trivially holds if the first two states do not hold.